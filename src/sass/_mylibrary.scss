@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

@mixin make-container($gutter: $container-padding-x) {
  width: 100%;
  padding-right: var(--#{$variable-prefix}gutter-x, #{$gutter});
  padding-left: var(--#{$variable-prefix}gutter-x, #{$gutter});
  margin-right: auto;
  margin-left: auto;
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// container
@if $enable-grid-classes {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          // sau khi đạt đến điểm ngắt hiện tại thì dừng
          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}

// grid
// @if $enable-cssgrid {
//   .grid {
//     display: grid;
//     // grid-template-rows: repeat(var(--#{$variable-prefix}rows, 1), 1fr);
//     // grid-template-columns: repeat(var(--#{$variable-prefix}columns, #{$grid-columns}), 1fr);
//     gap: var(--#{$variable-prefix}gap, #{$grid-gutter-width});

//     // @include make-cssgrid();
//   }
// }

// $columns: $grid-columns;
// $breakpoints: $grid-breakpoints;

// @each $breakpoint in map-keys($breakpoints) {
//   $infix: breakpoint-infix($breakpoint, $breakpoints);

//   @include media-breakpoint-up($breakpoint, $breakpoints) {
//     @if $columns > 0 {
//       @for $i from 1 through $columns {
//         .g-col#{$infix}-#{$i} {
//           // grid-column: auto / span $i;
//           grid-template-columns: repeat($i, 1fr);
//         }
//       }
//     }
//   }
// }

// text
// @each $breakpoint in map-keys($breakpoints) {
//   $infix: breakpoint-infix($breakpoint, $breakpoints);

//   @include media-breakpoint-up($breakpoint, $breakpoints) {
//     .text-center#{$infix} {
//       text-align: center;
//     }
//     .text-left#{$infix} {
//       text-align: left;
//     }
//     .text-right#{$infix} {
//       text-align: right;
//     }
//   }
// }
// .dont-break-out {
//   /* These are technically the same, but use both */
//   overflow-wrap: break-word;
//   word-wrap: break-word;

//   -ms-word-break: break-all;
//   /* This is the dangerous one in WebKit, as it breaks things wherever */
//   word-break: break-all;
//   /* Instead use this non-standard one: */
//   word-break: break-word;

//   /* Adds a hyphen where the word breaks, if supported (No Blink) */
//   -ms-hyphens: auto;
//   -moz-hyphens: auto;
//   -webkit-hyphens: auto;
//   hyphens: auto;
// }

.loading-bg {
  width: 100%;
  height: 100%;
  flex-shrink: 0;
  position: relative;
  background-color: #a9a9a9;;
  background-image: linear-gradient(
    -60deg, transparent, transparent 40%,
    #ffffff44 40%, #ffffff44 60%,
    transparent 60%, transparent 100%
  );
  background-size: 200% 100%;
  background-repeat: no-repeat;
  background-position-x: 145%;
  animation: across 1.5s linear .5s infinite;
}
@keyframes across {
  0% {
    background-position-x: 145%;
  }
  50%,
  100% {
    background-position-x: -45%;
  }
}
// @for $i from 1 through 5 {
//   @if ($i < 4) {
//     .pending-h-#{$i} {
//       @extend .pending;
//       height: $pending-h * $i;
//     }
//   }
//   .pending-p-#{$i} {
//     @extend .pending;
//     height: $pending-p * $i;
//   }
// }

// button
.btn {
  display: block;
  display: -webkit-box;
  cursor: pointer;
} 

// .gradient-loader {
//   width: 100%;
//   height: 100%;
//   flex-shrink: 0;
//   border-radius: 4px;
//   -webkit-animation-duration: 1.25s;
//   animation-duration: 1.25s;
//   -webkit-animation-fill-mode: forwards;
//   animation-fill-mode: forwards;
//   -webkit-animation-iteration-count: infinite;
//   animation-iteration-count: infinite;
//   -webkit-animation-name: i8-gradient-loader__blink;
//   animation-name: i8-gradient-loader__blink;
//   -webkit-animation-timing-function: linear;
//   animation-timing-function: linear;
//   background: #a9a9a9;
//   background: linear-gradient(90deg,rgba(0,0,0,.1) 10%,rgba(0,0,0,.05) 18%,rgba(0,0,0,.1) 33%);
//   background: linear-gradient(90deg,var(--gradient-loader-background-color,rgba(0,0,0,.1)) 10%,rgba(0,0,0,.05) 18%,var(--gradient-loader-background-color,rgba(0,0,0,.1)) 33%);
//   position: relative;
//   background-size: 1000px 104px;
// }

@each $name, $width in $grid-breakpoints {
  @if $width == 0 {
    .show {
      display: block !important;
    }
    .hide {
      display: none !important;
    }
  } @else {
    .show-#{$name} {
      @extend .hide;
    }
    .hide-#{$name} {
      @extend .show;
    }
    @media (min-width: $width) {
      .show-#{$name} {
        display: block !important;
      }
      .hide-#{$name} {
        display: none !important;
      }
    }
  }
}

.star__icon {
  width: 1.5rem;
  height: 1.5rem;
  fill: #FFCC00;
  margin-bottom: -2px;
}